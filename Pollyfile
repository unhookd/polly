#!/usr/bin/env ruby

# image declares container artifacts
@bootstrap_artifact = image {
  stage "bootstrap", "ubuntu:jammy-20220421"

  command("USER") {
    "root"
  }

  env "DEBIAN_FRONTEND" => "noninteractive",
      "LC_ALL" => "C.UTF-8",
      "LANG" => "en_US",
      "LANGUAGE" => "en_US",
      "ACCEPT_EULA" => "y"

  apt %w{locales locales-all}

  run %q{locale-gen --purge en_US}
  run %q{/bin/echo -e "LANG=$LANG\nLANGUAGE=$LANGUAGE\n" | tee /etc/default/locale}
  run %q{locale-gen $LANGUAGE}
  run %q{dpkg-reconfigure locales}

  apt %w{vim git curl apt-transport-https aptitude ca-certificates apt-utils software-properties-common docker.io build-essential libyaml-dev ruby3* libruby3* ruby-bundler rubygems-integration rake amazon-ecr-credential-helper}

  #TODO: ppa module / extra repo module
  run %q{curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add}
  run %q{apt-add-repository "deb http://apt.kubernetes.io/ kubernetes-xenial main"}
  apt %w{kubectl}

  run %q{groupadd --gid 121 alpha}
  run %q{groupadd --gid 134 beta}
  run %q{groupadd --gid 999 gamma}
  run %q{groupadd --gid 1000 theta}
  run %q{groupadd --gid 1001 zeta}
  
  run %q{useradd --uid 1000 --home-dir /home/app --create-home --shell /bin/bash app --groups docker,alpha,beta,gamma,theta,zeta}
  run %q{useradd --uid 1001 --home-dir /home/runner --create-home --shell /bin/false runner --groups docker,alpha,beta,gamma,theta,zeta}

  run %q{mkdir -p /polly/safe/git /polly/safe/run /polly/safe/tmp /polly/app}
  run %q{chown -Rv app.alpha /polly}

  #TODO: workdir module
  command("WORKDIR") {
    "/polly/app"
  }

  ##TODO: this is hacked
  ##run %q{ln -sfv /polly/app/bin/polly /usr/local/bin/polly}

  run %q{chown -R app /home/app}

  command("USER") {
    "app"
  }

  run %q{git config --global user.email "you@example.com"}
  run %q{git config --global user.name "Your Name"}

  #TODO: more prototype-z detection
  command("COPY") {
    "--chown=app Gemfile polly.gemspec VERSION /polly/app/"
  }

  #run %q{bundle config set --local path vendor/bundle}
  #run %q{bundle config set --local without development}
  #run %q{bundle install --jobs=4 --retry=3}

  command("COPY") {
    "--chown=app Thorfile /polly/app/"
  }

  command("COPY") {
    "--chown=app config /polly/app/config/"
  }

  command("COPY") {
    "--chown=app lib /polly/app/lib"
  }

  command("COPY") {
    "--chown=app bin /polly/app/bin"
  }

  command("COPY") {
    "--chown=app doc /polly/app/doc"
  }

  run %q{gem build polly.gemspec -o polly-latest.gem}

  command("COPY") {
    "--chown=app Pollyfile /polly/app/"
  }

  command("USER") {
    "root"
  }

  run %q{gem install polly-latest.gem}

  command("USER") {
    "app"
  }

  command("WORKDIR") {
    "/home/app"
  }

  run %q{cd /polly/app && polly generate > Dockerfile}
}

#workflow_image = "ghcr.io/unhookd/polly:3.0-rc1"
workflow_image = "polly:latest"

@plain_workflow = plan {
  job("primary",
    [{"image"=>workflow_image}],
    [
      {"run"=>{"name"=>"demo","command"=>"echo DEMO!!!!"}},
      {"run"=>{"name"=>"config","command"=>"bundle config set --local path vendor/bundle"}},
      {"run"=>{"name"=>"bundler","command"=>"bundle install"}},
      {"run"=>{"name"=>"rspec","command"=>"bundle exec rspec"}}
    ],{},"/home/app/polly"
  )
}

@gitch_pipeline = continuous {
  #publish @bootstrap_artifact
  test @plain_workflow
}
