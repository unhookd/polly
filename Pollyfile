#!/usr/bin/env ruby

@base = image {
  stage "base", "ghcr.io/unhookd/polly:3.0-rc1@sha256:7cc65086b101fe352a8ff83180888f0f7079b2f80139b0f39ba7b2a4cb34b168"
  #stage "base", "ghcr.io/unhookd/polly:3.0-rc1"
  #stage "base", "ubuntu:jammy-20220421"

  root

  env "DEBIAN_FRONTEND" => "noninteractive",
      "LC_ALL" => "C.UTF-8",
      "LANG" => "en_US",
      "LANGUAGE" => "en_US",
      "ACCEPT_EULA" => "y"

  group(121, "alpha")
  group(123, "tau")
  group(134, "beta")
  group(999, "docker")
  group(1000, "theta")
  group(1001, "zeta")

  useradd(1000, "app", "alpha,beta,docker,theta,zeta,tau")
  useradd(1001, "runner", "alpha,beta,docker,theta,zeta,tau")

  apt %w{locales locales-all}

  run %q{test -e /usr/lib/locale/locale-archive || ((locale-gen --purge en_US); (echo -e "LANG=$LANG\nLANGUAGE=$LANGUAGE\n" | tee /etc/default/locale); (locale-gen $LANGUAGE); (dpkg-reconfigure locales))}

  apt %w{vim git curl apt-transport-https aptitude ca-certificates apt-utils software-properties-common docker.io build-essential libyaml-dev ruby3* libruby3* ruby-bundler rubygems-integration rake amazon-ecr-credential-helper}

  run %q{curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add}
  run %q{apt-add-repository "deb http://apt.kubernetes.io/ kubernetes-xenial main"}
  apt %w{kubectl}

  run %q{usermod -a -G $(grep docker /etc/group | cut -d: -f3) app}
  run %q{usermod -a -G $(grep docker /etc/group | cut -d: -f3) runner}

  run %q{mkdir /tmp/buildkit && curl -sL -o buildkit.tar.gz "https://github.com/moby/buildkit/releases/download/v0.11.1/buildkit-v0.11.1.linux-amd64.tar.gz" && tar zxf buildkit.tar.gz && mv bin/buildctl /usr/local/bin && rm -Rf /tmp/buildkit}
}

# image declares container artifacts
@gem = image {
  stage "gem", @base.stage

  #TODO: workdir module
  command("WORKDIR") {
    "/__w/polly/polly"
  }

  root

  #TODO: more prototype-z detection
  command("COPY") {
    "--chown=app polly.gemspec VERSION CHANGELOG.md /__w/polly/polly/"
  }

  command("COPY") {
    "--chown=app Thorfile /__w/polly/polly/"
  }

  command("COPY") {
    "--chown=app config /__w/polly/polly/config/"
  }

  command("COPY") {
    "--chown=app lib /__w/polly/polly/lib"
  }

  command("COPY") {
    "--chown=app bin /__w/polly/polly/bin"
  }

  command("COPY") {
    "--chown=app doc /__w/polly/polly/doc"
  }

  run %q{mkdir -p /polly/app /app /__w/polly/polly}
  run %q{chown -R app.alpha /home/app /polly /app /__w/polly/polly}
  run %q{chown -R app /home/app /polly /app /__w/polly/polly}
  run %q{chown -R app /home/app}
  run %q{su app -s /bin/bash -c 'cd /__w/polly/polly && gem build polly.gemspec -o /home/app/polly-latest.gem'}
}

# final bits are just the .gem install as if on end-user box
@deploy = image {
  stage "deploy", @base.stage

  command("WORKDIR") {
    "/home/app"
  }

  command("COPY") {
    "--chown=app --from=gem /home/app/polly-latest.gem /home/app/polly-latest.gem"
  }

  run %q{gem install --no-document --minimal-deps /home/app/polly-latest.gem && grep -Rn '\.gem\.' /var/lib 2>/dev/null | cut -d: -f1 | sort | uniq | xargs -I{} rm {} && rm /home/app/polly-latest.gem}

  app
}

#description("For pollyci")

workflow_image = "ghcr.io/unhookd/polly:3.0-rc1"
#TODO: !!!! make this make sense to configure workflow_image = "polly:latest"

@plain_workflow = plan {
  job("primary",
    [{"image"=>workflow_image}],
    [
      {"run"=>{"name"=>"demo","command"=>"echo DEMO!!!!"}},
      {"run"=>{"name"=>"config","command"=>"bundle config set --local path vendor/bundle"}},
      {"run"=>{"name"=>"bundler","command"=>"bundle install"}},
      {"run"=>{"name"=>"rspec","command"=>"bundle exec rspec"}},
      {"run"=>{"name"=>"build","command"=>"buildctl --addr kube-pod://buildkitd build --frontend dockerfile.v0 --local context=. --local dockerfile=."}}
    ],{},"/home/app/polly"
  )
}

@gitch_pipeline = continuous {
  #TODO: !!!!
  #publish @bootstrap_artifact
  test @plain_workflow
}
